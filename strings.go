// Code generated by "stringer -type=EventType,MessageType,NodeState,TransactionType -output=strings.go"; DO NOT EDIT.

package pfcp

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ReceiveResendRequest-0]
	_ = x[ReceiveValidResponse-1]
}

const _EventType_name = "ReceiveResendRequestReceiveValidResponse"

var _EventType_index = [...]uint8{0, 20, 40}

func (i EventType) String() string {
	if i >= EventType(len(_EventType_index)-1) {
		return "EventType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _EventType_name[_EventType_index[i]:_EventType_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[PFCP_HEARTBEAT_REQUEST-1]
	_ = x[PFCP_HEARTBEAT_RESPONSE-2]
	_ = x[PFCP_PFD_MANAGEMENT_REQUEST-3]
	_ = x[PFCP_PFD_MANAGEMENT_RESPONSE-4]
	_ = x[PFCP_ASSOCIATION_SETUP_REQUEST-5]
	_ = x[PFCP_ASSOCIATION_SETUP_RESPONSE-6]
	_ = x[PFCP_ASSOCIATION_UPDATE_REQUEST-7]
	_ = x[PFCP_ASSOCIATION_UPDATE_RESPONSE-8]
	_ = x[PFCP_ASSOCIATION_RELEASE_REQUEST-9]
	_ = x[PFCP_ASSOCIATION_RELEASE_RESPONSE-10]
	_ = x[PFCP_VERSION_NOT_SUPPORTED_RESPONSE-11]
	_ = x[PFCP_NODE_REPORT_REQUEST-12]
	_ = x[PFCP_NODE_REPORT_RESPONSE-13]
	_ = x[PFCP_SESSION_SET_DELETION_REQUEST-14]
	_ = x[PFCP_SESSION_SET_DELETION_RESPONSE-15]
	_ = x[PFCP_SESSION_ESTABLISHMENT_REQUEST-50]
	_ = x[PFCP_SESSION_ESTABLISHMENT_RESPONSE-51]
	_ = x[PFCP_SESSION_MODIFICATION_REQUEST-52]
	_ = x[PFCP_SESSION_MODIFICATION_RESPONSE-53]
	_ = x[PFCP_SESSION_DELETION_REQUEST-54]
	_ = x[PFCP_SESSION_DELETION_RESPONSE-55]
	_ = x[PFCP_SESSION_REPORT_REQUEST-56]
	_ = x[PFCP_SESSION_REPORT_RESPONSE-57]
}

const (
	_MessageType_name_0 = "PFCP_HEARTBEAT_REQUESTPFCP_HEARTBEAT_RESPONSEPFCP_PFD_MANAGEMENT_REQUESTPFCP_PFD_MANAGEMENT_RESPONSEPFCP_ASSOCIATION_SETUP_REQUESTPFCP_ASSOCIATION_SETUP_RESPONSEPFCP_ASSOCIATION_UPDATE_REQUESTPFCP_ASSOCIATION_UPDATE_RESPONSEPFCP_ASSOCIATION_RELEASE_REQUESTPFCP_ASSOCIATION_RELEASE_RESPONSEPFCP_VERSION_NOT_SUPPORTED_RESPONSEPFCP_NODE_REPORT_REQUESTPFCP_NODE_REPORT_RESPONSEPFCP_SESSION_SET_DELETION_REQUESTPFCP_SESSION_SET_DELETION_RESPONSE"
	_MessageType_name_1 = "PFCP_SESSION_ESTABLISHMENT_REQUESTPFCP_SESSION_ESTABLISHMENT_RESPONSEPFCP_SESSION_MODIFICATION_REQUESTPFCP_SESSION_MODIFICATION_RESPONSEPFCP_SESSION_DELETION_REQUESTPFCP_SESSION_DELETION_RESPONSEPFCP_SESSION_REPORT_REQUESTPFCP_SESSION_REPORT_RESPONSE"
)

var (
	_MessageType_index_0 = [...]uint16{0, 22, 45, 72, 100, 130, 161, 192, 224, 256, 289, 324, 348, 373, 406, 440}
	_MessageType_index_1 = [...]uint8{0, 34, 69, 102, 136, 165, 195, 222, 250}
)

func (i MessageType) String() string {
	switch {
	case 1 <= i && i <= 15:
		i -= 1
		return _MessageType_name_0[_MessageType_index_0[i]:_MessageType_index_0[i+1]]
	case 50 <= i && i <= 57:
		i -= 50
		return _MessageType_name_1[_MessageType_index_1[i]:_MessageType_index_1[i+1]]
	default:
		return "MessageType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[INITIAL-0]
	_ = x[REQUEST-1]
	_ = x[FINISH-2]
}

const _NodeState_name = "INITIALREQUESTFINISH"

var _NodeState_index = [...]uint8{0, 7, 14, 20}

func (i NodeState) String() string {
	if i < 0 || i >= NodeState(len(_NodeState_index)-1) {
		return "NodeState(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _NodeState_name[_NodeState_index[i]:_NodeState_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SendingRequest-0]
	_ = x[SendingResponse-1]
}

const _TransactionType_name = "SendingRequestSendingResponse"

var _TransactionType_index = [...]uint8{0, 14, 29}

func (i TransactionType) String() string {
	if i >= TransactionType(len(_TransactionType_index)-1) {
		return "TransactionType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _TransactionType_name[_TransactionType_index[i]:_TransactionType_index[i+1]]
}
func (v EventType) MarshalJSON() ([]byte, error) {
	return []byte(`"` + v.String() + `"`), nil
}

func (v MessageType) MarshalJSON() ([]byte, error) {
	return []byte(`"` + v.String() + `"`), nil
}

func (v NodeState) MarshalJSON() ([]byte, error) {
	return []byte(`"` + v.String() + `"`), nil
}

func (v TransactionType) MarshalJSON() ([]byte, error) {
	return []byte(`"` + v.String() + `"`), nil
}

